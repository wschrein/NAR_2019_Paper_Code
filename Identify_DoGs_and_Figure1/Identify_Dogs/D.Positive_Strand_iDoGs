{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import all of the necessary libraries \n",
    "from __future__ import division\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get TPM using tpm function \n",
    "def counts_to_tpm(counts_matrix):\n",
    "    data_cols = counts_matrix.columns[1:]\n",
    "    rpk = counts_matrix[data_cols].divide((counts_matrix['Length']/1000), axis=0)\n",
    "    sums_per_million = rpk.sum(axis=0)/(10**6)\n",
    "    tpm = rpk.divide(sums_per_million)\n",
    "    \n",
    "    return tpm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/wschrein/anaconda2/lib/python2.7/site-packages/ipykernel_launcher.py:2: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\\t'.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Chr</th>\n",
       "      <th>Start</th>\n",
       "      <th>End</th>\n",
       "      <th>Strand</th>\n",
       "      <th>Length</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample1Aligned.out.sam.sorted.bam</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample2Aligned.out.sam.sorted.bam</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample3Aligned.out.sam.sorted.bam</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample4Aligned.out.sam.sorted.bam</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample5Aligned.out.sam.sorted.bam</th>\n",
       "      <th>/home/wschrein/scratch/nuevo/att_1/bams/Sample6Aligned.out.sam.sorted.bam</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geneid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>WBGene00022276</th>\n",
       "      <td>I</td>\n",
       "      <td>10403</td>\n",
       "      <td>10423</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WBGene00022275</th>\n",
       "      <td>I</td>\n",
       "      <td>43723</td>\n",
       "      <td>43743</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WBGene00044345</th>\n",
       "      <td>I</td>\n",
       "      <td>47462</td>\n",
       "      <td>47482</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>32</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WBGene00021677</th>\n",
       "      <td>I</td>\n",
       "      <td>49909</td>\n",
       "      <td>49929</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WBGene00000812</th>\n",
       "      <td>I</td>\n",
       "      <td>71848</td>\n",
       "      <td>71868</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Chr  Start    End Strand  Length  \\\n",
       "Geneid                                            \n",
       "WBGene00022276   I  10403  10423      +      21   \n",
       "WBGene00022275   I  43723  43743      +      21   \n",
       "WBGene00044345   I  47462  47482      +      21   \n",
       "WBGene00021677   I  49909  49929      +      21   \n",
       "WBGene00000812   I  71848  71868      +      21   \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample1Aligned.out.sam.sorted.bam  \\\n",
       "Geneid                                                                                      \n",
       "WBGene00022276                                                  0                           \n",
       "WBGene00022275                                                  1                           \n",
       "WBGene00044345                                                 16                           \n",
       "WBGene00021677                                                  2                           \n",
       "WBGene00000812                                                 10                           \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample2Aligned.out.sam.sorted.bam  \\\n",
       "Geneid                                                                                      \n",
       "WBGene00022276                                                  0                           \n",
       "WBGene00022275                                                  1                           \n",
       "WBGene00044345                                                 17                           \n",
       "WBGene00021677                                                  8                           \n",
       "WBGene00000812                                                 13                           \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample3Aligned.out.sam.sorted.bam  \\\n",
       "Geneid                                                                                      \n",
       "WBGene00022276                                                  0                           \n",
       "WBGene00022275                                                  0                           \n",
       "WBGene00044345                                                 32                           \n",
       "WBGene00021677                                                  0                           \n",
       "WBGene00000812                                                 17                           \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample4Aligned.out.sam.sorted.bam  \\\n",
       "Geneid                                                                                      \n",
       "WBGene00022276                                                  0                           \n",
       "WBGene00022275                                                  0                           \n",
       "WBGene00044345                                                  3                           \n",
       "WBGene00021677                                                  0                           \n",
       "WBGene00000812                                                 10                           \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample5Aligned.out.sam.sorted.bam  \\\n",
       "Geneid                                                                                      \n",
       "WBGene00022276                                                  0                           \n",
       "WBGene00022275                                                  0                           \n",
       "WBGene00044345                                                  3                           \n",
       "WBGene00021677                                                  0                           \n",
       "WBGene00000812                                                 15                           \n",
       "\n",
       "                /home/wschrein/scratch/nuevo/att_1/bams/Sample6Aligned.out.sam.sorted.bam  \n",
       "Geneid                                                                                     \n",
       "WBGene00022276                                                  0                          \n",
       "WBGene00022275                                                  1                          \n",
       "WBGene00044345                                                  2                          \n",
       "WBGene00021677                                                  0                          \n",
       "WBGene00000812                                                 13                          "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in the positve_iDOGS file \n",
    "dogs = pd.read_table('positive_iDOGS.txt',comment='#',index_col=0)\n",
    "dogs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs = dogs[dogs['Strand']==\"+\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Chr</th>\n",
       "      <th>Start</th>\n",
       "      <th>End</th>\n",
       "      <th>Strand</th>\n",
       "      <th>Length</th>\n",
       "      <th>ctr_1</th>\n",
       "      <th>ctr_3</th>\n",
       "      <th>ctr_4</th>\n",
       "      <th>hs_1</th>\n",
       "      <th>hs_3</th>\n",
       "      <th>hs_4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geneid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>WBGene00022276</th>\n",
       "      <td>I</td>\n",
       "      <td>10403</td>\n",
       "      <td>10423</td>\n",
       "      <td>+</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Chr  Start    End Strand  Length  ctr_1  ctr_3  ctr_4  hs_1  \\\n",
       "Geneid                                                                       \n",
       "WBGene00022276   I  10403  10423      +      21      0      0      0     0   \n",
       "\n",
       "                hs_3  hs_4  \n",
       "Geneid                      \n",
       "WBGene00022276     0     0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rename columns to something more palatable \n",
    "dogs = dogs.rename(columns={'/home/wschrein/scratch/nuevo/att_1/bams/Sample1Aligned.out.sam.sorted.bam':'ctr_1',\n",
    "                          '/home/wschrein/scratch/nuevo/att_1/bams/Sample2Aligned.out.sam.sorted.bam':'ctr_3',\n",
    "                          '/home/wschrein/scratch/nuevo/att_1/bams/Sample3Aligned.out.sam.sorted.bam':'ctr_4',\n",
    "                          '/home/wschrein/scratch/nuevo/att_1/bams/Sample4Aligned.out.sam.sorted.bam':'hs_1',\n",
    "                          '/home/wschrein/scratch/nuevo/att_1/bams/Sample5Aligned.out.sam.sorted.bam':'hs_3',\n",
    "                          '/home/wschrein/scratch/nuevo/att_1/bams/Sample6Aligned.out.sam.sorted.bam':'hs_4'\n",
    "                          })\n",
    "dogs.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make an info column of things that you might need later \n",
    "info=dogs.reset_index()\n",
    "info=info[['Geneid','Chr','Start','End']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now get rid of them \n",
    "dogs.drop(['Chr', 'Start', 'End'], inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ctr_1</th>\n",
       "      <th>ctr_3</th>\n",
       "      <th>ctr_4</th>\n",
       "      <th>hs_1</th>\n",
       "      <th>hs_3</th>\n",
       "      <th>hs_4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geneid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>WBGene00022276</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ctr_1  ctr_3  ctr_4  hs_1  hs_3  hs_4\n",
       "Geneid                                               \n",
       "WBGene00022276    0.0    0.0    0.0   0.0   0.0   0.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dogs_tpm = counts_to_tpm(dogs) # get the tpm for all of the reads \n",
    "dogs_tpm.drop('Length', axis=1, inplace=True) # no longer need the length column\n",
    "\n",
    "dogs_tpm.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'ctr_1', u'ctr_3', u'ctr_4', u'hs_1', u'hs_3', u'hs_4'], dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cols = dogs_tpm.columns[0:]\n",
    "data_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd = dogs_tpm.loc[dogs_tpm[data_cols].sum(axis=1) > 0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd = dogs_tpm_filterd.copy()  # copy to get rid of slicing error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculate the Intergenic Ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd['ctrl_total'] = dogs_tpm_filterd[dogs_tpm_filterd.columns[0:3]].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd['hs_total'] = dogs_tpm_filterd[dogs_tpm_filterd.columns[3:6]].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd['ctrl_total'] = dogs_tpm_filterd['ctrl_total'] +1 # need to add one to each replicate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "dogs_tpm_filterd['ratio'] = dogs_tpm_filterd.hs_total / dogs_tpm_filterd.ctrl_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ctr_1</th>\n",
       "      <th>ctr_3</th>\n",
       "      <th>ctr_4</th>\n",
       "      <th>hs_1</th>\n",
       "      <th>hs_3</th>\n",
       "      <th>hs_4</th>\n",
       "      <th>ctrl_total</th>\n",
       "      <th>hs_total</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geneid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>WBGene00022275</th>\n",
       "      <td>15.34731</td>\n",
       "      <td>20.620683</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.462212</td>\n",
       "      <td>36.967992</td>\n",
       "      <td>13.462212</td>\n",
       "      <td>0.364159</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ctr_1      ctr_3  ctr_4  hs_1  hs_3       hs_4  ctrl_total  \\\n",
       "Geneid                                                                          \n",
       "WBGene00022275  15.34731  20.620683    0.0   0.0   0.0  13.462212   36.967992   \n",
       "\n",
       "                 hs_total     ratio  \n",
       "Geneid                               \n",
       "WBGene00022275  13.462212  0.364159  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dogs_tpm_filterd.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make it so that only two replicates need to be non-zero ###\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make it so that only two replicates have to be non-zero\n",
    "\n",
    "_1_3 = dogs_tpm_filterd[(dogs_tpm_filterd['hs_1']!=0) & (dogs_tpm_filterd['hs_3']!=0)]\n",
    "_1_4 = dogs_tpm_filterd[(dogs_tpm_filterd['hs_1']!=0) & (dogs_tpm_filterd['hs_4']!=0)]\n",
    "_3_4 = dogs_tpm_filterd[(dogs_tpm_filterd['hs_3']!=0) & (dogs_tpm_filterd['hs_4']!=0)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_concat = pd.concat([_1_3,_1_4,_3_4]) # now add them on top of each other \n",
    "df_concat.reset_index(inplace=True)\n",
    "df_concat.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geneid</th>\n",
       "      <th>ctr_1</th>\n",
       "      <th>ctr_3</th>\n",
       "      <th>ctr_4</th>\n",
       "      <th>hs_1</th>\n",
       "      <th>hs_3</th>\n",
       "      <th>hs_4</th>\n",
       "      <th>ctrl_total</th>\n",
       "      <th>hs_total</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WBGene00044345</td>\n",
       "      <td>245.556954</td>\n",
       "      <td>350.551603</td>\n",
       "      <td>593.504832</td>\n",
       "      <td>25.063704</td>\n",
       "      <td>55.635919</td>\n",
       "      <td>26.924423</td>\n",
       "      <td>1190.613389</td>\n",
       "      <td>107.624045</td>\n",
       "      <td>0.090394</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Geneid       ctr_1       ctr_3       ctr_4       hs_1       hs_3  \\\n",
       "0  WBGene00044345  245.556954  350.551603  593.504832  25.063704  55.635919   \n",
       "\n",
       "        hs_4   ctrl_total    hs_total     ratio  \n",
       "0  26.924423  1190.613389  107.624045  0.090394  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hs_filtered_dogs = df_concat\n",
    "df_concat.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# change ratio to greater than 2 and see what happens\n",
    "# This ratio seems to be the best for our purposes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get list of Genes with an intergenic ratio of greater than 2\n",
    "# By Trial an error this seems to be a good ratio to filter out DoGs\n",
    "\n",
    "\n",
    "\n",
    "hs_filtered_dogs = hs_filtered_dogs[hs_filtered_dogs['ratio']>2]\n",
    "\n",
    "hs_filtered_dogs.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Maybe we should filter the things that are not protein coding genes out\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/wschrein/anaconda2/lib/python2.7/site-packages/ipykernel_launcher.py:2: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\\t'.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geneid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WBGene00010957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Geneid\n",
       "0  WBGene00010957"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the list of protein coding genes \n",
    "pcgs = pd.read_table('gtf_protein_simpified.csv',names=['Geneid'])\n",
    "pcgs.head(1) # perfect; "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we are most concerned with filtering out pcgs\n",
    "# so merge with list of protein coding genes\n",
    "# pcgs were determined by parsing gtf file for genes \n",
    "# annotated as pcgs\n",
    "\n",
    "pcgs_merge = pd.merge(hs_filtered_dogs,pcgs,how='inner',on='Geneid')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Can we filter further with Intron Retention Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import intron retention scores to further filter out\n",
    "# this file is a shortened version of the Intron Retention Generated in \n",
    "# Figure1/Calculate_Intron_Retention_Score\n",
    "# it has been mereged with HS up genes, so it only has scores for HS up genes\n",
    "\n",
    "\n",
    "s2 = pd.read_csv('s2_scores.csv')\n",
    "s2.rename(columns={'WB_ID':'Geneid', 'ratio':'IR_score'}, inplace=True)\n",
    "s2.drop([\"Unnamed: 0\"], inplace=True, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Geneid</th>\n",
       "      <th>IR_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WBGene00000002</td>\n",
       "      <td>0.064036</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Geneid  IR_score\n",
       "0  WBGene00000002  0.064036"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "pcgs_merge_IR = pd.merge(pcgs_merge, s2, on='Geneid', how='inner')\n",
    "len(pcgs_merge_IR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cutoff_pcgs_merge_IR = pcgs_merge_IR[pcgs_merge_IR['IR_score']> 0.4]\n",
    "len(cutoff_pcgs_merge_IR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create list of genes with IJ ratio greater than2 and IR score greater than 0.4\n",
    "# by examination with genome browser this seems to filter out most bad DoGs\n",
    "\n",
    "up_filtered_plus = cutoff_pcgs_merge_IR[['Geneid']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "## This file is used in Figure1/D1. Filter_the_up_Genes.ipynb\n",
    "## to filter out interfering DoG on the + strand\n",
    "\n",
    "up_filtered_plus.to_csv('up_bad_plus_dogs.csv',index=None)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
